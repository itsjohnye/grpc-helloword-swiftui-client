//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: storage.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Storage_StorageClient`, then call methods of this protocol to make API calls.
internal protocol Storage_StorageClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Storage_StorageClientInterceptorFactoryProtocol? { get }

  func getProfile(
    _ request: Storage_GetProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Storage_GetProfileRequest, Storage_GetProfileResponse>

  func updateProfile(
    _ request: Storage_UpdateProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Storage_UpdateProfileRequest, Storage_UpdateProfileResponse>

  func subscribe(
    _ request: Storage_SubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Storage_ServerStreamResponse) -> Void
  ) -> ServerStreamingCall<Storage_SubscribeRequest, Storage_ServerStreamResponse>

  func unsubscribe(
    _ request: Storage_UnsubscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Storage_UnsubscribeRequest, Storage_UnsubscribeResponse>

  func broadcast(
    _ request: Storage_Greeting,
    callOptions: CallOptions?
  ) -> UnaryCall<Storage_Greeting, Storage_Empty>

  func bidiStream(
    callOptions: CallOptions?,
    handler: @escaping (Storage_BidiStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Storage_BidiStreamRequest, Storage_BidiStreamResponse>
}

extension Storage_StorageClientProtocol {
  internal var serviceName: String {
    return "storage.Storage"
  }

  ///Unary
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProfile(
    _ request: Storage_GetProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Storage_GetProfileRequest, Storage_GetProfileResponse> {
    return self.makeUnaryCall(
      path: Storage_StorageClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  /// Unary call to UpdateProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateProfile(
    _ request: Storage_UpdateProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Storage_UpdateProfileRequest, Storage_UpdateProfileResponse> {
    return self.makeUnaryCall(
      path: Storage_StorageClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  ///Server streaming
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribe(
    _ request: Storage_SubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Storage_ServerStreamResponse) -> Void
  ) -> ServerStreamingCall<Storage_SubscribeRequest, Storage_ServerStreamResponse> {
    return self.makeServerStreamingCall(
      path: Storage_StorageClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Unsubscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Unsubscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unsubscribe(
    _ request: Storage_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Storage_UnsubscribeRequest, Storage_UnsubscribeResponse> {
    return self.makeUnaryCall(
      path: Storage_StorageClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }

  /// Unary call to Broadcast
  ///
  /// - Parameters:
  ///   - request: Request to send to Broadcast.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func broadcast(
    _ request: Storage_Greeting,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Storage_Greeting, Storage_Empty> {
    return self.makeUnaryCall(
      path: Storage_StorageClientMetadata.Methods.broadcast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastInterceptors() ?? []
    )
  }

  ///Bidirectional streaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidiStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Storage_BidiStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Storage_BidiStreamRequest, Storage_BidiStreamResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Storage_StorageClientMetadata.Methods.bidiStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidiStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Storage_StorageClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Storage_StorageNIOClient")
internal final class Storage_StorageClient: Storage_StorageClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Storage_StorageClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Storage_StorageClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the storage.Storage service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Storage_StorageClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Storage_StorageNIOClient: Storage_StorageClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Storage_StorageClientInterceptorFactoryProtocol?

  /// Creates a client for the storage.Storage service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Storage_StorageClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Storage_StorageAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Storage_StorageClientInterceptorFactoryProtocol? { get }

  func makeGetProfileCall(
    _ request: Storage_GetProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Storage_GetProfileRequest, Storage_GetProfileResponse>

  func makeUpdateProfileCall(
    _ request: Storage_UpdateProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Storage_UpdateProfileRequest, Storage_UpdateProfileResponse>

  func makeSubscribeCall(
    _ request: Storage_SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Storage_SubscribeRequest, Storage_ServerStreamResponse>

  func makeUnsubscribeCall(
    _ request: Storage_UnsubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Storage_UnsubscribeRequest, Storage_UnsubscribeResponse>

  func makeBroadcastCall(
    _ request: Storage_Greeting,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Storage_Greeting, Storage_Empty>

  func makeBidiStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Storage_BidiStreamRequest, Storage_BidiStreamResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Storage_StorageAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Storage_StorageClientMetadata.serviceDescriptor
  }

  internal var interceptors: Storage_StorageClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetProfileCall(
    _ request: Storage_GetProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Storage_GetProfileRequest, Storage_GetProfileResponse> {
    return self.makeAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func makeUpdateProfileCall(
    _ request: Storage_UpdateProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Storage_UpdateProfileRequest, Storage_UpdateProfileResponse> {
    return self.makeAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func makeSubscribeCall(
    _ request: Storage_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Storage_SubscribeRequest, Storage_ServerStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Storage_StorageClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  internal func makeUnsubscribeCall(
    _ request: Storage_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Storage_UnsubscribeRequest, Storage_UnsubscribeResponse> {
    return self.makeAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }

  internal func makeBroadcastCall(
    _ request: Storage_Greeting,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Storage_Greeting, Storage_Empty> {
    return self.makeAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.broadcast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastInterceptors() ?? []
    )
  }

  internal func makeBidiStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Storage_BidiStreamRequest, Storage_BidiStreamResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Storage_StorageClientMetadata.Methods.bidiStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidiStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Storage_StorageAsyncClientProtocol {
  internal func getProfile(
    _ request: Storage_GetProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Storage_GetProfileResponse {
    return try await self.performAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func updateProfile(
    _ request: Storage_UpdateProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Storage_UpdateProfileResponse {
    return try await self.performAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func subscribe(
    _ request: Storage_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Storage_ServerStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Storage_StorageClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  internal func unsubscribe(
    _ request: Storage_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Storage_UnsubscribeResponse {
    return try await self.performAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }

  internal func broadcast(
    _ request: Storage_Greeting,
    callOptions: CallOptions? = nil
  ) async throws -> Storage_Empty {
    return try await self.performAsyncUnaryCall(
      path: Storage_StorageClientMetadata.Methods.broadcast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastInterceptors() ?? []
    )
  }

  internal func bidiStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Storage_BidiStreamResponse> where RequestStream: Sequence, RequestStream.Element == Storage_BidiStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Storage_StorageClientMetadata.Methods.bidiStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidiStreamInterceptors() ?? []
    )
  }

  internal func bidiStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Storage_BidiStreamResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Storage_BidiStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Storage_StorageClientMetadata.Methods.bidiStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidiStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Storage_StorageAsyncClient: Storage_StorageAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Storage_StorageClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Storage_StorageClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Storage_StorageClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getProfile'.
  func makeGetProfileInterceptors() -> [ClientInterceptor<Storage_GetProfileRequest, Storage_GetProfileResponse>]

  /// - Returns: Interceptors to use when invoking 'updateProfile'.
  func makeUpdateProfileInterceptors() -> [ClientInterceptor<Storage_UpdateProfileRequest, Storage_UpdateProfileResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Storage_SubscribeRequest, Storage_ServerStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'unsubscribe'.
  func makeUnsubscribeInterceptors() -> [ClientInterceptor<Storage_UnsubscribeRequest, Storage_UnsubscribeResponse>]

  /// - Returns: Interceptors to use when invoking 'broadcast'.
  func makeBroadcastInterceptors() -> [ClientInterceptor<Storage_Greeting, Storage_Empty>]

  /// - Returns: Interceptors to use when invoking 'bidiStream'.
  func makeBidiStreamInterceptors() -> [ClientInterceptor<Storage_BidiStreamRequest, Storage_BidiStreamResponse>]
}

internal enum Storage_StorageClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Storage",
    fullName: "storage.Storage",
    methods: [
      Storage_StorageClientMetadata.Methods.getProfile,
      Storage_StorageClientMetadata.Methods.updateProfile,
      Storage_StorageClientMetadata.Methods.subscribe,
      Storage_StorageClientMetadata.Methods.unsubscribe,
      Storage_StorageClientMetadata.Methods.broadcast,
      Storage_StorageClientMetadata.Methods.bidiStream,
    ]
  )

  internal enum Methods {
    internal static let getProfile = GRPCMethodDescriptor(
      name: "GetProfile",
      path: "/storage.Storage/GetProfile",
      type: GRPCCallType.unary
    )

    internal static let updateProfile = GRPCMethodDescriptor(
      name: "UpdateProfile",
      path: "/storage.Storage/UpdateProfile",
      type: GRPCCallType.unary
    )

    internal static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/storage.Storage/Subscribe",
      type: GRPCCallType.serverStreaming
    )

    internal static let unsubscribe = GRPCMethodDescriptor(
      name: "Unsubscribe",
      path: "/storage.Storage/Unsubscribe",
      type: GRPCCallType.unary
    )

    internal static let broadcast = GRPCMethodDescriptor(
      name: "Broadcast",
      path: "/storage.Storage/Broadcast",
      type: GRPCCallType.unary
    )

    internal static let bidiStream = GRPCMethodDescriptor(
      name: "BidiStream",
      path: "/storage.Storage/BidiStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

